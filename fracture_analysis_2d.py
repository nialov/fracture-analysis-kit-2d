# -*- coding: utf-8 -*-
"""
/***************************************************************************
 FractureAnalysis2D
                                 A QGIS plugin
 Analysis of lineament & fracture traces, branches and nodes
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2020-01-12
        git sha              : $Format:%H$
        copyright            : (C) 2020 by Nikolas Ovaskainen
        email                : nikolasovaskainen@hotmail.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
from qgis.PyQt.QtCore import QSettings, QTranslator, QCoreApplication
from qgis.PyQt.QtGui import QIcon
from qgis.PyQt.QtWidgets import QAction, QFileDialog, QTableWidgetItem
from qgis.core import QgsProject, Qgis

# Initialize Qt resources from file resources.py
from .resources import *

# Import the code for the dialog
from .fracture_analysis_2d_dialog import FractureAnalysis2DDialog
import os.path

from .fracture_analysis_kit import target_area_analysis_qgis
from .fracture_analysis_kit import main_target_analysis
from .fracture_analysis_kit import logging_tool
import time
import pandas as pd
import logging

debug_logger = logging_tool.DebugLogger()


class FractureAnalysis2D:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale
        locale = QSettings().value("locale/userLocale")[0:2]
        locale_path = os.path.join(
            self.plugin_dir, "i18n", "FractureAnalysis2D_{}.qm".format(locale)
        )

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr("&2D Fracture Analysis Kit")

        # Check if plugin was started the first time in current QGIS session
        # Must be set in initGui() to survive plugin reloads
        self.first_start = None

        # Own variables for storing
        self.line_layers = None
        self.polygon_layers = None
        self.point_layers = None
        self.table_df = pd.DataFrame(columns=['Trace', 'Branch', 'Node', 'Area', 'Name', 'Group'])
        self.gname_df = pd.DataFrame(columns=['Group', 'Cut Off'])
        # Debug logger
        self.debug_logger = debug_logger
        # TODO: Implement sets
        self.set_list = None

    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate("FractureAnalysis2D", message)

    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None,
    ):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            # Adds plugin icon to Plugins toolbar
            self.iface.addToolBarIcon(action)

        if add_to_menu:
            self.iface.addPluginToVectorMenu(self.menu, action)

        self.actions.append(action)

        return action

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = ":/plugins/fracture_analysis_2d/icon.png"
        self.add_action(
            icon_path,
            text=self.tr("2D Fracture Analysis"),
            callback=self.run,
            parent=self.iface.mainWindow(),
        )

        # will be set False in run()
        self.first_start = True

    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginVectorMenu(
                self.tr("&2D Fracture Analysis Kit"), action
            )
            self.iface.removeToolBarIcon(action)

    def select_output_folder(self, tab: int):
        outp = QFileDialog.getExistingDirectory(self.dlg, "Select   output directory ")
        if type(outp) is (tuple or list):
            raise Exception("Multiple outputs from QFileDialog.getExistingDirectory")
        else:
            folder = outp
        if tab == 1:
            self.dlg.lineEdit_folder.setText(folder)
        elif tab == 2:
            self.dlg.lineEdit_tab2_folder.setText(folder)
        else:
            raise Exception('how is tab not 1 or 2')


    def clear_group_name_cut_off_table(self):
        self.dlg.tableWidget_tab2_gnames.clearContents()
        self.gname_df = self.gname_df.iloc[0:0]

    def populate_groups(self):
        # Get group name list
        gname_list = self.gname_df.Group.tolist()
        # Clear contents
        self.dlg.comboBox_tab2_gnames.clear()
        self.dlg.comboBox_tab2_gnames.addItems(gname_list)

    def add_row(self):
        # Additions
        name = self.dlg.lineEdit_tab2_tan.text()
        trace_layer = self.line_layers[self.dlg.comboBox_trace_2.currentIndex()]
        branch_layer = self.line_layers[self.dlg.comboBox_branch_2.currentIndex()]
        node_layer = self.point_layers[self.dlg.comboBox_node_2.currentIndex()]
        area_layer = self.polygon_layers[self.dlg.comboBox_area_2.currentIndex()]
        target_area_group = self.dlg.comboBox_tab2_gnames.currentText()
        # Substitute for blank names
        if name == "":
            name = trace_layer.name()
        # Current row count
        curr_row = self.dlg.tableWidget_tab2.rowCount()
        # Add new row
        self.dlg.tableWidget_tab2.insertRow(curr_row)
        # Add data
        self.dlg.tableWidget_tab2.setItem(curr_row, 4, QTableWidgetItem(name))
        self.dlg.tableWidget_tab2.setItem(curr_row, 0, QTableWidgetItem(trace_layer.name()))
        self.dlg.tableWidget_tab2.setItem(curr_row, 1, QTableWidgetItem(branch_layer.name()))
        self.dlg.tableWidget_tab2.setItem(curr_row, 2, QTableWidgetItem(node_layer.name()))
        self.dlg.tableWidget_tab2.setItem(curr_row, 3, QTableWidgetItem(area_layer.name()))
        self.dlg.tableWidget_tab2.setItem(curr_row, 5, QTableWidgetItem(target_area_group))
        self.table_df = self.table_df.append({'Trace': trace_layer, 'Branch': branch_layer, 'Node': node_layer
                                                 , 'Area': area_layer, 'Name': name, 'Group': target_area_group}
                                             , ignore_index=True)

    def clear_table(self):
        self.dlg.tableWidget_tab2.clearContents()
        self.table_df = self.table_df.iloc[0:0]

    def run_multi_target_analysis(self):
        # Get group name list
        gname_list = self.gname_df.Group.tolist()
        # Output folder
        results_folder = self.dlg.lineEdit_tab2_folder.text()
        # Analysis name
        analysis_name = self.dlg.lineEdit_tab2_analysis_name.text()
        # Run analysis
        main_target_analysis.main_multi_target_area(self.table_df, results_folder, analysis_name, gname_list, self.set_list, self.debug_logger)
        # Push finish message
        self.iface.messageBar().pushMessage(
            "Success",
            f"Plots were of {analysis_name} made into {results_folder}",
            level=Qgis.Success,
            duration=10,
        )

    def add_row_group_name_cutoff(self):
        group_name = self.dlg.lineEdit_gname.text()
        cut_off = self.dlg.lineEdit_tab2_cutoff.text()
        # Current row count
        curr_row = self.dlg.tableWidget_tab2_gnames.rowCount()
        # Add new row
        self.dlg.tableWidget_tab2_gnames.insertRow(curr_row)
        # Add data
        self.dlg.tableWidget_tab2_gnames.setItem(curr_row, 0, QTableWidgetItem(group_name))
        self.dlg.tableWidget_tab2_gnames.setItem(curr_row, 1, QTableWidgetItem(cut_off))
        # Append to DataFrame
        self.gname_df = self.gname_df.append({'Group': group_name, 'Cut Off': cut_off}, ignore_index=True)
        # Populate names to target area group button
        self.populate_groups()
        # Clear name and cut_off text boxes
        self.dlg.lineEdit_gname.clear()
        self.dlg.lineEdit_tab2_cutoff.clear()

    def run(self):
        """Run method that performs all the real work"""

        # Create the dialog with elements (after translation) and keep reference
        # Only create GUI ONCE in callback, so that it will only load when the plugin is started
        if self.first_start == True:
            self.first_start = False
            self.dlg = FractureAnalysis2DDialog()
            self.dlg.pushButton.clicked.connect(lambda: self.select_output_folder(1))
            self.dlg.pushButton_tab2_folder.clicked.connect(lambda: self.select_output_folder(2))
            # Clear group name table from prev runs
            self.dlg.tableWidget_tab2_gnames.clearContents()
            # Clear group name list
            self.dlg.pushButton_gname_clear.clicked.connect(self.clear_group_name_cut_off_table)
            # Add row to table for layers and info
            self.dlg.pushButton_tab2_add_row.clicked.connect(self.add_row)
            # Clear table
            self.dlg.pushButton_tab2_table_clear.clicked.connect(self.clear_table)
            # Run multi-target analysis
            self.dlg.pushButton_tab2_run.clicked.connect(self.run_multi_target_analysis)
            # Add row to table for group names and cut offs
            self.dlg.pushButton_gname_add.clicked.connect(self.add_row_group_name_cutoff)


        # Fetch the currently loaded layers
        layers = QgsProject.instance().mapLayers().values()

        # Filter to only vector layers UNUSED
        vector_layers = []
        # Filter to polyline, point and polygon layers
        line_layers, point_layers, polygon_layers = [], [], []
        for layer in layers:
            if "VectorLayer" in str(layer.type()):
                vector_layers.append(layer)
                layer_features_iter = layer.getFeatures()
                # TODO: Use yield?
                # Find feature type by checking the geometry of the first item in the geometry column of the layer
                for feature in layer_features_iter:
                    if 'String' in str(feature.geometry()):
                        line_layers.append(layer)
                        break
                    elif 'PointZ' in str(feature.geometry()):
                        point_layers.append(layer)
                        break
                    elif 'Polygon' in str(feature.geometry()):
                        polygon_layers.append(layer)
                        break
        # Save as class attributes
        # TODO: Pop used layers from list, ease-of-use
        self.line_layers, self.point_layers, self.polygon_layers,  = line_layers, point_layers, polygon_layers

        # Clear the contents of the comboBox from previous runs tab 1
        self.dlg.comboBox_trace.clear()
        self.dlg.comboBox_branch.clear()
        self.dlg.comboBox_node.clear()
        self.dlg.comboBox_area.clear()
        # Populate the comboBox with names of all the loaded layers tab 1
        self.dlg.comboBox_trace.addItems([layer.name() for layer in line_layers])
        self.dlg.comboBox_branch.addItems([layer.name() for layer in line_layers])
        self.dlg.comboBox_node.addItems([layer.name() for layer in point_layers])
        self.dlg.comboBox_area.addItems([layer.name() for layer in polygon_layers])

        # Clear the contents of the comboBox from previous runs tab 2
        self.dlg.comboBox_trace_2.clear()
        self.dlg.comboBox_branch_2.clear()
        self.dlg.comboBox_node_2.clear()
        self.dlg.comboBox_area_2.clear()
        # Populate the comboBox with names of all the loaded layers tab 2
        self.dlg.comboBox_trace_2.addItems([layer.name() for layer in line_layers])
        self.dlg.comboBox_branch_2.addItems([layer.name() for layer in line_layers])
        self.dlg.comboBox_node_2.addItems([layer.name() for layer in point_layers])
        self.dlg.comboBox_area_2.addItems([layer.name() for layer in polygon_layers])


        # show the dialog
        self.dlg.show()
        # Run the dialog event loop
        result = self.dlg.exec_()
        # See if OK was pressed
        if result:
            # Do something useful here - delete the line containing pass and
            # substitute with your code.
            results_folder = self.dlg.lineEdit_folder.text()
            name = self.dlg.lineEdit_name.text()
            trace_layer = line_layers[self.dlg.comboBox_trace.currentIndex()]
            branch_layer = line_layers[self.dlg.comboBox_branch.currentIndex()]
            node_layer = point_layers[self.dlg.comboBox_node.currentIndex()]
            area_layer = polygon_layers[self.dlg.comboBox_area.currentIndex()]

            # Start analysis

            _ = main_target_analysis.main_single_target_area(
                results_folder, name, trace_layer, branch_layer, node_layer, area_layer, self.debug_logger)

            # self.debug_logger.write_to_log_time('table_df:' + str(self.table_df))


            # Push finish message
            self.iface.messageBar().pushMessage(
                "Success",
                f"Plots were of {name} made into {results_folder}",
                level=Qgis.Success,
                duration=10,
            )
